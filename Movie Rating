# Introduction to Database
# Moving Rating Exercises

/* Delete the tables if they already exist */
drop table if exists Movie;
drop table if exists Reviewer;
drop table if exists Rating;

/* Create the schema for our tables */
create table Movie(mID int, title text, year int, director text);
create table Reviewer(rID int, name text);
create table Rating(rID int, mID int, stars int, ratingDate date);

/* Populate the tables with our data */
insert into Movie values(101, 'Gone with the Wind', 1939, 'Victor Fleming');
insert into Movie values(102, 'Star Wars', 1977, 'George Lucas');
insert into Movie values(103, 'The Sound of Music', 1965, 'Robert Wise');
insert into Movie values(104, 'E.T.', 1982, 'Steven Spielberg');
insert into Movie values(105, 'Titanic', 1997, 'James Cameron');
insert into Movie values(106, 'Snow White', 1937, null);
insert into Movie values(107, 'Avatar', 2009, 'James Cameron');
insert into Movie values(108, 'Raiders of the Lost Ark', 1981, 'Steven Spielberg');

insert into Reviewer values(201, 'Sarah Martinez');
insert into Reviewer values(202, 'Daniel Lewis');
insert into Reviewer values(203, 'Brittany Harris');
insert into Reviewer values(204, 'Mike Anderson');
insert into Reviewer values(205, 'Chris Jackson');
insert into Reviewer values(206, 'Elizabeth Thomas');
insert into Reviewer values(207, 'James Cameron');
insert into Reviewer values(208, 'Ashley White');

insert into Rating values(201, 101, 2, '2011-01-22');
insert into Rating values(201, 101, 4, '2011-01-27');
insert into Rating values(202, 106, 4, null);
insert into Rating values(203, 103, 2, '2011-01-20');
insert into Rating values(203, 108, 4, '2011-01-12');
insert into Rating values(203, 108, 2, '2011-01-30');
insert into Rating values(204, 101, 3, '2011-01-09');
insert into Rating values(205, 103, 3, '2011-01-27');
insert into Rating values(205, 104, 2, '2011-01-22');
insert into Rating values(205, 108, 4, null);
insert into Rating values(206, 107, 3, '2011-01-15');
insert into Rating values(206, 106, 5, '2011-01-19');
insert into Rating values(207, 107, 5, '2011-01-20');
insert into Rating values(208, 104, 3, '2011-01-02');

## SQL Movie-Rating Query Exercises(Core)  ##
#1:
select title
from Movie
where director = 'Steven Spielberg';

#2:
select distinct year
from  Movie, Rating
where Movie.mID = Rating.mID 
and 
(
stars = 4
or stars = 5
)
order by year asc;

#3: 
select title
from Movie
where
mID not in
(
select
mID
from
Rating
);

#4:
select name
from reviewer
where
rID in 
(
select rID
from rating
where ratingDate is null
);

#5:
select name, title, stars, ratingdate
from movie, reviewer, rating
where movie.mID = rating.mID
and reviewer.rID = rating.rID
order by name, title, stars;

#6:
select name, title
from rating as r1, rating as r2, movie, reviewer
where
r1.rID = reviewer.rID
and r1.mID = movie.mID
and r1.rID = r2.rID
and r1.mID = r2.mID
and r1.ratingdate < r2.ratingdate
and r1.stars < r2.stars;

#7:
select title, mxstar
from
(
select mID, max(stars) as mxstar
from rating
group by mID
)
as maxstars,
movie
where
movie.mID = maxstars.mID
order by title;

#8:
select
title,spread
from
(
select mID, (max(stars) - min(stars))as spread
from rating
group by mID
) as spread_stars,
movie
where movie.mID = spread_stars.mID
order by spread desc,title;

#9:

select abs(avg(avg_stars_b)-avg(avg_stars_a)) as diff
from
(
select rating.mID, avg(stars) as avg_stars_b
from rating, movie
where 
year < 1980
and movie.mID = rating.mID
group by mID
)as temp1,
(
select rating.mID, avg(stars) as avg_stars_a
from rating, movie
where 
year > 1980
and movie.mID = rating.mID
group by mID) as temp2;



# 1. Find the titles of all movies directed by Steven Spielberg.
select title
from movie
where director='Steven Spielberg';
# 2. Find all years that have a movie that received a rating of 4 or 5, 
# and sort them in increasing order.
select distinct year
from movie join rating using (mID)
where stars=4 or stars=5
order by year asc;
# 3.Find the titles of all movies that have no ratings.
select title
from movie
where mID not in
(select mID
 from rating);
# 4. Some reviewers didn't provide a date with their rating. 
# Find the names of all reviewers who have ratings with a NULL value for the date. 
select name
from reviewer join rating using (rID)
where ratingdate is null;
# 5. Write a query to return the ratings data in a more readable format: 
# reviewer name, movie title, stars, and ratingDate. 
# Also, sort the data, first by reviewer name, then by movie title, 
# and lastly by number of stars.
select name, title, stars, ratingDate
from (movie join rating using (mID) ) join reviewer using (rID)
order by name, title, stars;
# 6. For all cases where the same reviewer rated the same movie twice 
# and gave it a higher rating the second time, 
# return the reviewer's name and the title of the movie. 
select *
from
(select *
from rating as r1
where 
(select count(*) from rating as r2 where r2.rID=r1.rID and r2.mID=r1.mID)=2) as A1,
(select *
from rating as r1
where 
(select count(*) from rating as r2 where r2.rID=r1.rID and r2.mID=r1.mID)=2) as A2
where 
A1.rID=A2.rID and
A1.mID=A2.mID and
A1.ratingdate<A2.ratingdate and
A1.stars<A2.stars;

select name,title
from
((select r1.rID,r2.mID
from rating as r1, rating as r2
where 
r1.mID=r2.mID and
r1.rID=r2.rID and
r1.ratingDate < r2.ratingDate and
r1.stars < r2.stars) as NR
join movie using (mID))join reviewer using (rID);

select name,title
from rating as r1,rating as r2,movie,reviewer
where 
movie.mID = r1.mID and
reviewer.rID = r1.rID and
r1.rID = r2.rID and
r1.mID = r2.mID and
r1.ratingDate < r2.ratingDate and
r1.stars < r2.stars;

# 7. For each movie that has at least one rating, 
# find the highest number of stars that movie received. 
# Return the movie title and number of stars. Sort by movie title. 
select title,max(stars) as mxstars
from movie join rating using (mID)
group by mID
order by title;
# not applicable to SQL server

select title as movie_title, number_of_stars
from (select mID,max(stars) as number_of_stars
from rating
group by mID) as NM
join movie using (mID)
order by movie_title;

# 8. For each movie, return the title and the 'rating spread',
# that is, the difference between highest and lowest ratings given to that movie. 
# Sort by rating spread from highest to lowest, then by movie title. 
select title, (max(stars)-min(stars)) as diff
from movie join rating using (mID)
group by mID
order by diff desc,title;
# 9. Find the difference between the average rating 
# of movies released before 1980 and the average rating of movies released after 1980. 
# (Make sure to calculate the average rating for each movie, 
# then the average of those averages for movies before 1980 and movies after. 
# Don't just calculate the overall average rating before and after 1980.) 
select (avg(avgstars1)-avg(avgstars2))as diff
from 
(select avg(stars) as avgstars1
from movie join rating using (mID)
where year<1980
group by mID) as A1,
(select avg(stars) as avgstars2
from movie join rating using (mID)
where year>1980
group by mID) as A2;

select * from movie;
select * from reviewer;
select * from rating;

##SQL Movie-Rating Query Exercises(extra)##

select 
from 
rating as r1 
, rating as r2
, reviewer as re1
, reviewer as re2
where
r1.mID = r2.mID
and r1.name < r2.name


#1.Find the names of all reviewers who rated Gone with the Wind. 
seLect name
from reviewer
where rID in
(
select rID
from rating
where mID in
(
select distinct mID
from movie
where title = 'Gone with the Wind'
)
);

select distinct name
from (movie join rating using(mID)) join reviewer using (rID)
where title = 'Gone with the Wind';

#2.For any rating where the reviewer is the same as the director of the movie, 
# return the reviewer name, movie title, and number of stars.

select name, title, stars
from rating, reviewer, movie
where
rating.rID = reviewer.rID
and movie.mID = rating.mID
and director = name;

select name,title,stars
from (movie join rating using(mID)) join reviewer using (rID)
where name=director;

#3.Return all reviewer names and movie names together in a single list, alphabetized.

select name
from reviewer
union
select title
from movie
order by name;

#4.Find the titles of all movies not reviewed by Chris Jackson.

select title
from movie
where mID not in 
(
select mID 
from rating 
where rID =
(
select rID 
from reviewer
where name = 'Chris Jackson'
)
);
#5. For all pairs of reviewers such that both reviewers gave a rating to the same movie, 
# return the names of both reviewers.
select distinct re1.name,re2.name
from rating as r1, rating as r2, reviewer as re1,reviewer as re2
where
re1.name<re2.name and
r1.mID=r2.mID and
r1.rID=re1.rID and
r2.rID=re2.rID;

#6 For each rating that is the lowest (fewest stars) currently in the database, 
# return the reviewer name, movie title, and number of stars.

# 1)for each rating of each movie
select distinct s1.name,s1.title,s1.stars
from
(select mID, rID,name,title,stars
from (movie join rating using(mID)) join reviewer using (rID)) as S1,
(select mID, rID,name,title,stars
from (movie join rating using(mID)) join reviewer using (rID)) as S2
where 
S1.mID=S2.mID and
S1.rID=S2.rID and
S1.stars <= all
(select stars
 from 
(select mID, rID,name,title,stars
from (movie join rating using(mID)) join reviewer using (rID)) as S2
where S1.mID=S2.mID and S1.rID=S2.rID);

# 2)
select name,title,stars
from (movie join rating using (mID)) join reviewer using (rID)
where stars = (select min(stars) from rating);

#7 List movie titles and average ratings, from highest-rated to lowest-rated. 
# If two or more movies have the same average rating, list them in alphabetical order. 
select title,avgstars
from
(select mID,avg(stars) as avgstars
from rating
group by mID) as C
join movie using (mID)
order by avgstars desc,title;

#8 Find the names of all reviewers who have contributed three or more ratings.
select name
from rating join reviewer using (rID)
group by rID
having count(*)>=3;

#9 Some directors directed more than one movie. 
# For all such directors, return the titles of all movies directed by them, 
# along with the director name. 
# Sort by director name, then movie title.
select title,director
from
(select director
from movie
group by director
having count(*)>=2) as D
join movie using (director)
order by director,title;

# Find the movie(s) with the highest average rating. 
# Return the movie title(s) and average rating.
select title,avgstars
from movie,
(select mID,avgstars
from 
(select mID,avg(stars) as avgstars
from rating
group by mID) as D
where avgstars = 
(select max(avgstars) 
from 
(select mID,avg(stars) as avgstars
from rating
group by mID) as D)) as E
where movie.mID=E.mID;

#11 Find the movie(s) with the lowest average rating. 
# Return the movie title(s) and average rating.
select title,avgstars
from movie,
(select mID,avgstars
from 
(select mID,avg(stars) as avgstars
from rating
group by mID) as D
where avgstars = 
(select min(avgstars) 
from 
(select mID,avg(stars) as avgstars
from rating
group by mID) as D)) as E
where movie.mID=E.mID;

#12 For each director, return the director's name together 
# with the title(s) of the movie(s) they directed that 
# received the highest rating among all of their movies, 
# and the value of that rating. Ignore movies whose director is NULL. 

select distinct F.director,F.stars,title
from
(select director,max(stars) as stars
from movie join rating using (mID)
group by director) as F,movie,rating
where movie.director = F.director
and movie.mID = rating.mID
and F.stars = rating.stars
