/* Delete the tables if they already exist */
drop table if exists Highschooler;
drop table if exists Friend;
drop table if exists Likes;

/* Create the schema for our tables */
create table Highschooler (
    ID int,
    name text,
    grade int
);
create table Friend (
    ID1 int,
    ID2 int
);
create table Likes (
    ID1 int,
    ID2 int
);

/* Populate the tables with our data */
insert into Highschooler values (1510, 'Jordan', 9);
insert into Highschooler values (1689, 'Gabriel', 9);
insert into Highschooler values (1381, 'Tiffany', 9);
insert into Highschooler values (1709, 'Cassandra', 9);
insert into Highschooler values (1101, 'Haley', 10);
insert into Highschooler values (1782, 'Andrew', 10);
insert into Highschooler values (1468, 'Kris', 10);
insert into Highschooler values (1641, 'Brittany', 10);
insert into Highschooler values (1247, 'Alexis', 11);
insert into Highschooler values (1316, 'Austin', 11);
insert into Highschooler values (1911, 'Gabriel', 11);
insert into Highschooler values (1501, 'Jessica', 11);
insert into Highschooler values (1304, 'Jordan', 12);
insert into Highschooler values (1025, 'John', 12);
insert into Highschooler values (1934, 'Kyle', 12);
insert into Highschooler values (1661, 'Logan', 12);

insert into Friend values (1510, 1381);
insert into Friend values (1510, 1689);
insert into Friend values (1689, 1709);
insert into Friend values (1381, 1247);
insert into Friend values (1709, 1247);
insert into Friend values (1689, 1782);
insert into Friend values (1782, 1468);
insert into Friend values (1782, 1316);
insert into Friend values (1782, 1304);
insert into Friend values (1468, 1101);
insert into Friend values (1468, 1641);
insert into Friend values (1101, 1641);
insert into Friend values (1247, 1911);
insert into Friend values (1247, 1501);
insert into Friend values (1911, 1501);
insert into Friend values (1501, 1934);
insert into Friend values (1316, 1934);
insert into Friend values (1934, 1304);
insert into Friend values (1304, 1661);
insert into Friend values (1661, 1025);
insert into Friend select ID2, ID1 from Friend;

insert into Likes values(1689, 1709);
insert into Likes values(1709, 1689);
insert into Likes values(1782, 1709);
insert into Likes values(1911, 1247);
insert into Likes values(1247, 1468);
insert into Likes values(1641, 1468);
insert into Likes values(1316, 1304);
insert into Likes values(1501, 1934);
insert into Likes values(1934, 1501);
insert into Likes values(1025, 1101);

select 
H1.name, 
H1.grade, 
H2.name, 
H2.grade
from 
likes as L1, highschooler as H1, 
highschooler as H2
where
L1.ID1 = H1.ID
and L1.ID2 = H2.ID
and H1.grade - 2 >= H2.grade;

#1. Find the names of all students who are friends with someone named Gabriel. 
select
name
from 
highschooler
where
ID in 
(
select ID1
from friend
where ID2 in
(select distinct ID
from highschooler
where name = 'Gabriel'
)
);


#Q2. For every student who likes someone 2 or more grades younger than themselves, 
# return that student's name and grade, and the name and grade of the student they like. 
select 
    A.name, A.grade, highschooler.name, highschooler.grade
from
    (select 
        *
    from
        highschooler, likes
    where
        highschooler.ID = likes.ID1) as A,
    highschooler
where
    A.ID2 = highschooler.ID
        and A.grade - 2 >= highschooler.grade;

select 
H1.name, 
H1.grade, 
H2.name, 
H2.grade
from 
likes as L1, highschooler as H1, 
highschooler as H2
where
L1.ID1 = H1.ID
and L1.ID2 = H2.ID
and H1.grade - 2 >= H2.grade;

#Q3: For every pair of students who both like each other, 
# return the name and grade of both students. 
# Include each pair only once, with the two names in alphabetical order.

select L1.ID1,L1.ID2
from 
(select ID1,ID2,(ID1+ID2) as sumID,abs(ID1-ID2) as diffID
from likes) as L1,
(select ID1,ID2,(ID1+ID2) as sumID,abs(ID1-ID2) as diffID
from likes) as L2
where L1.ID1<>L1.ID2 and
	  L1.sumID = L2.sumID and
      L1.diffID = L2.diffID;

select 
H1.name,
H1.grade,
H2.name,
H2.grade
from 
likes as L1,
likes as L2,
highschooler as H1,
highschooler as H2
where 
L1.ID1 = L2.ID2 and
L1.ID2 = L2.ID1 and
L1.ID1 = H1.ID and
L1.ID2 = H2.ID and
H1.name < H2.name;

#4. Find all students who do not appear in the Likes table (as a student who likes or is liked) 
# and return their names and grades. Sort by grade, then by name within each grade.
select grade, name
from highschooler
where ID not in
(select ID1 from likes
union
select ID2 from likes)
order by grade asc, name;

select name,grade
from highschooler
where ID not in (select ID1 from likes) and ID not in (select ID2 from likes)
order by grade,name;

#5. For every situation where student A likes student B, 
# but we have no information about whom B likes 
# (that is, B does not appear as an ID1 in the Likes table), 
# return A and B's names and grades. 

select 
H1.name,
H1.grade,
H2.name,
H2.grade
from 
highschooler as H1,
highschooler as H2, 
likes as L
where 
L.ID1 = H1.ID and 
L.ID2 = H2.ID and
L.ID2 not in 
(select ID1 from likes);

#6. Find names and grades of students who only have friends in the same grade. 
# Return the result sorted by grade, then by name within each grade.

select  
distinct H1.name,H1.grade
from 
highschooler as H1,
highschooler as H2,
friend as F
where
F.ID1 = H1.ID and
F.ID2 = H2.ID and
H1.grade = all
(
select H2.grade
from
highschooler as H2,
friend as F
where
F.ID1 = H1.ID and
F.ID2 = H2.ID
)
order by H1.grade,name;

#7. For each student A who likes a student B where the two are not friends, 
# find if they have a friend C in common (who can introduce them!). 
# For all such trios, return the name and grade of A, B, and C. 

select distinct
H1.name as name_A,
H1.grade as grade_A,
H2.name as name_B,
H2.grade as grade_B,
H3.name as name_C,
H3.grade as grade_C
from 
likes, 
friend as F1,
friend as F2,
friend as F3,
highschooler as H1,
highschooler as H2,
highschooler as H3
where 
likes.ID1 = F1.ID1 and
likes.ID2 <> F1.ID2 and
likes.ID1 = F2.ID1 and
likes.ID2 = F3.ID1 and
F2.ID2 = F3.ID2 and
H1.ID = likes.ID1 and
H2.ID = likes.ID2 and
H3.ID = F2.ID2;

select distinct
H1.name as name_A,
H1.grade as grade_A,
H2.name as name_B,
H2.grade as grade_B,
H3.name as name_C,
H3.grade as grade_C
from 
likes, 
friend as F1,
friend as F2,
friend as F3,
highschooler as H1,
highschooler as H2,
highschooler as H3
where 
likes.ID1 = F1.ID1 and
likes.ID2 not in (select ID2 from friend as F1 where likes.ID1 = F1.ID1) and
likes.ID1 = F2.ID1 and
likes.ID2 = F3.ID1 and
F2.ID2 = F3.ID2 and
H1.ID = likes.ID1 and
H2.ID = likes.ID2 and
H3.ID = F2.ID2;

select * from likes;
select * from friend;
select * from highschooler;

#8.Find the difference between the number of students in the school and 
# the number of different first names. 

select (count(*)-count(distinct name))as diff
from highschooler;

#9. Find the name and grade of all students who are liked by more than one other student. 

select name,grade
from
highschooler
where ID in
(select ID2
from likes
group by ID2
having count(*)>=2);

#1.For every situation where student A likes student B, 
# but student B likes a different student C, return the names and grades of A, B, and C. 

select
H1.name as name_A,
H1.grade as grade_A,
H2.name as name_B,
H2.grade as grade_B,
H3.name as name_C,
H3.grade as grade_C
from 
likes as L1,
likes as L2,
highschooler as H1,
highschooler as H2,
highschooler as H3
where
L1.ID2 = L2.ID1 and
L2.ID2<>L1.ID1 and
L1.ID1 = H1.ID and
L1.ID2 = H2.ID and
L2.ID2 = H3.ID;

#2. Find those students for whom all of their friends are 
# in different grades from themselves. 
# Return the students' names and grades.

select name
from highschooler
where ID in
(select
distinct ID1
from 
friend, 
highschooler as H1, 
highschooler as H2
where 
ID1 = H1.ID and
ID2 = H2.ID and
H1.grade <> H2.grade);

select distinct H1.name, H1.grade
from 
friend as F, 
highschooler as H1,
highschooler as H2
where 
F.ID1 = H1.ID
and F.ID1 = H2.ID
and
H1.grade not in 
(
select highschooler.grade
from highschooler, Friend
where H1.ID = Friend.ID1
and highschooler.ID = Friend.ID2
);


#3. What is the average number of friends per student? 
# (Your result should be just one number.) 

select avg(sum_friend)
from
(select count(*) as sum_friend
from friend
group by ID1) as A;

#4. Find the number of students who are either friends with Cassandra 
#or are friends of friends of Cassandra. 
#Do not count Cassandra, even though technically she is a friend of a friend. 

select count(*)
from highschooler
where ID in
(select F1.ID2
from 
friend as F1,
friend as F2
where
F1.ID1 = (select ID from highschooler where name = 'Cassandra') or
(F1.ID1 = F2.ID1 and 
 F2.ID2 = (select ID from highschooler where name = 'Cassandra')and
 F1.ID2<>(select ID from highschooler where name = 'Cassandra')));

#5.Find the name and grade of the student(s) with the greatest number of friends. 

select highschooler.name,highschooler.grade
from
highschooler,
(select ID1 as ID,count(*) as sum_friend
from friend
group by ID1) as C
where
highschooler.ID = C.ID and
sum_friend in
(
select max(sum_friend)
from
(select ID1 as ID,count(*) as sum_friend
from friend
group by ID1) as C
)
